datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator prisma {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["orderByRelation"]
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  firstname         String
  lastname          String
  profilePic        String?
  posts             Post[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt
  fromFriendRequest FriendRequest[] @relation(name: "from_user")
  toFriendRequest   FriendRequest[] @relation(name: "to_user")
  garage            Garage?
  comment           Comment[]
  like              Like[]
  relationPost      Post[]          @relation("author_user")
}

model Post {
  id             Int       @id @default(autoincrement())
  type           FeedType
  content        String?
  photos         Photos[]
  comments       Comment[]
  likes          Like[]
  authorId       Int?
  relationUser   User?     @relation(name: "author_user", fields: [relationUserId], references: [id])
  author         User?     @relation(fields: [authorId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  relationUserId Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  userId    Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

model Garage {
  id        Int       @id @default(autoincrement())
  vehicles  Vehicle[]
  owner     User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
}

model Vehicle {
  id             Int          @id @default(autoincrement())
  year           Int
  make           Company      @relation(fields: [companyId], references: [id])
  model          VehicleModel @relation(fields: [vehicleModelId], references: [id])
  photos         Photos[]
  companyId      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  garage         Garage?      @relation(fields: [garageId], references: [id])
  garageId       Int?
  vehicleModelId Int
}

model VehicleModel {
  id        Int       @id @default(autoincrement())
  name      String
  year      Int?
  maker     Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicle   Vehicle[]
  companyId Int
}

model Photos {
  id        Int      @id @default(autoincrement())
  url       String
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Company {
  id           Int            @id @default(autoincrement())
  name         String
  vehicle      Vehicle[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  vehicleModel VehicleModel[]
}

model FriendRequest {
  id         Int            @id @default(autoincrement())
  status     RelationStatus
  toUserId   Int
  fromUserId Int
  fromUser   User           @relation(name: "from_user", fields: [fromUserId], references: [id])
  toUser     User           @relation(name: "to_user", fields: [toUserId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([toUserId, fromUserId])
}

enum RelationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FeedType {
  POST
  RELATION
  VEHICLE_ADDED
}
